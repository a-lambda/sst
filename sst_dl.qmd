---
title: "Récupération des données SST"
format: html
---

## Chargement de packages nécessaires

-   `httr` pour le téléchargement des fichiers de données
-   `tidyverse` pour les fonctionnalités offertes par
    1.  `ggplot2`,
    2.  `lubridate` pour la gestion du temps,
    3.  `purrr`, entre autres.
-   `terra`,
-   `ncdf4` pour la gestion des fichiers NetCDF,

```{r}
#| label: load_libraries
#| message: false

libs <- c(
  "httr",
  "tidyverse"
)

#install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
  install.packages(libs[!installed_libs])
}

#load libraries
invisible(lapply(libs, library, character.only = TRUE))

```

## Décompte des fichiers exploitables 

Les fichiers de données NectCDF temporaires ont le suffixe "\_preliminary".   
Les autres ne possèdent pas ce suffixe.

Le premier fichier NetCDF exploitable date du 1er septembre 1981. 
En date du `Sys.Date()` nous allons déterminer :

- la date du dernier fichier finalisé disponible
- la date du dernier fichier temporaire disponible
- le nombre total de fichiers finalisés
- le nombre total de fichiers temporaires

```{r}
#| label: get_last_valid_sst_date

yyyymm <- function(date) { # transform Date '1981-06-25' to string '198106' 
  annee <- year(date)
  mois <- month(date)
  paste0(annee, if_else(mois > 9, as.character(mois), paste0("0", mois)))
}

yyyymmdd <- function(date) { # transform Date '1981-06-25' to string '19810625'
  annee <- year(date)
  mois <- month(date)
  jour <- day(date)
  paste0(
    annee,
    if_else(mois > 9, as.character(mois), paste0("0", mois)),
    if_else(jour > 9, as.character(jour), paste0("0", jour))
  )
}

sst_file_link <- function(date, ready = TRUE) {
  chaine_matrice <- ifelse(
    ready, 
    "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@/oisst-avhrr-v02r01.&.nc",
    "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@/oisst-avhrr-v02r01.&_preliminary.nc"
  )
  sub("@", yyyymm(date), sub("&", yyyymmdd(date), chaine_matrice))
}

get_last_valid_data_dates <- function() {
  valide <- FALSE
  last_tempo_date <- Sys.Date() - 1
  # get last date for preliminary file
  while (!valide) { 
    http_status_code <- status_code(
      GET(sst_file_link(last_tempo_date, ready = FALSE))
    )
    if (http_status_code == 404) {
      last_tempo_date <- last_tempo_date - 1  
    } else {
      if (http_status_code == 200) {
        valide <- TRUE
      }
    }
  }
  valide <- FALSE
  last_valid_date <- last_tempo_date - 13 # supposed to be preliminary data
  while (!valide) {
    http_status_code <- status_code(
      GET(sst_file_link(last_valid_date, ready = TRUE))
    )
    if (http_status_code == 404) {
      last_valid_date <- last_valid_date - 1
    } else {
      if (http_status_code == 200) {
        valide <- TRUE
      }
    }
  }
  c(last_valid_date, last_tempo_date)
}

last_valid_date <- get_last_valid_data_dates()[[1]]
paste0("Dernier fichier finalisé daté du : ", last_valid_date)

last_tempo_date <- get_last_valid_data_dates()[[2]]
paste0("Dernier fichier temporaire daté du : ", last_tempo_date)

#--- date du premier fichier finalisé disponible
start_date <- ymd("1981-09-01")

number_of_nc_files <- interval(start_date, last_valid_date) %/% days(1) + 1
number_of_tempo_files <-
  interval(last_valid_date, last_tempo_date) %/% days(1)
paste0("Nombre de fichiers finalisés : ", number_of_nc_files)
paste0("Nombre de fichiers temporaires : ", number_of_tempo_files)

```

## Téléchargement des fichiers de données

```{r}
#| label: download_nc_files

# séquence des jours associés aux fichiers nc
seq_days_nc_files <- seq(
  start_date,
  last_tempo_date,
  by = "days"
)

# liste des fichiers à télécharger

get_nc_files <- function() {
  
  root_access <- "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr"
  file_prefixe <- "oisst-avhrr-v02r01"
  file_suffixe <- "nc"

  seq_days_regular_nc_files <- seq(
    start_date,
    last_valid_date,
    by = "days"
  )

  seq_days_temp_nc_file <- seq(
    last_valid_date + 1,
    last_tempo_date,
    by = "days"
  )

  dir_regular <- yyyymm(seq_days_regular_nc_files)
  dir_temp <- yyyymm(seq_days_temp_nc_file)
  string_regular <- yyyymmdd(seq_days_regular_nc_files)
  string_temp <- yyyymmdd(seq_days_temp_nc_file)
  
  seq_regular_nc_files <- paste(
    root_access, 
    dir_regular, 
    paste(
      file_prefixe, 
      string_regular, 
      file_suffixe, 
      sep = "."
    ), 
    sep = "/"
  )

  seq_temp_nc_files <- paste(
    root_access, 
    dir_temp, 
    paste(
      file_prefixe, 
      paste0(string_temp, "_preliminary"),
      file_suffixe,
      sep = "."
    ), 
    sep = "/"
  )

  list(seq_regular_nc_files, seq_temp_nc_files)
}

nc_regular_files <- get_nc_files()[[1]]
nc_temp_files <- get_nc_files()[[2]]

# téléchargement de tous les fichiers depuis la date d'origine des mesures
# 
sst_file_link <- function(date) {
  filename <- if_else(
    date > last_valid_date,
    "oisst-avhrr-v02r01.&_preliminary.nc",
    "oisst-avhrr-v02r01.&.nc"
  )
  regex_file_link <- paste(
    "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@",
    filename,
    sep = "/"
  )  
  sub("@", yyyymm(date), sub("&", yyyymmdd(date), regex_file_link))
}

get_oisst_data <- function(date) {
  link <- sst_file_link(date)
  link_split <- strsplit(link, '/')[[1]]
  file_name <- link_split[length(link_split)]
  file_to_write <- paste("DATA" , file_name, sep = "/")
  if (!file.exists(file_to_write)) {
    res <- httr::GET(
      link,
      write_disk(
        file_to_write,
        overwrite = TRUE
      ),
      progress()
    ) 
  } 
}

# téléchargement des fichiers nc
walk(seq_days_nc_files, get_oisst_data)

# nettoyage des fichiers temporary superflus

del_extra_temp_nc_files <- function() {
  stored_temp_files <- list.files("DATA", pattern = "_preliminary.nc")
  nc_temp_files_split <- strsplit(nc_temp_files, '/')
  actual_temp_files <- vapply(
    nc_temp_files_split, 
    \(x) x[length(x)], 
    character(1)
  )
  temp_files_to_delete <- 
    stored_temp_files[!(stored_temp_files %in% actual_temp_files)]
  if (length(temp_files_to_delete) > 0) {
    unlink(paste(".", "DATA", temp_files_to_delete, sep = '/'))
  }
}

# do it  
del_extra_temp_nc_files()

```
