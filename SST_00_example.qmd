---
title: "Données SST du 1er décembre 2024"
format: html
---

## Exploration du fichier NetCDF

Il est possible de trouver de plus amples informations sur le traitement des fichiers netCDF avec R [@netcdfi]

```{r}
#| label: load_libraries
#| message: false
#| code-fold: true

libs <- c("ncdf4", "tidyverse", "terra", "sf")

#install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
  install.packages(libs[!installed_libs])
}

#load libraries
invisible(lapply(libs, library, character.only = TRUE))

```

La connexion au fichier NetCDF s'opère via la commande nc_open.

Grâce à elle nous pouvons déjà voir quel type d'informations sont enregistrées.

```{r}
#| label: load_nc_file

(nc <- nc_open("DATA/RAW/oisst-avhrr-v02r01.20241201.nc"))

```

### Les dimensions

les variables principales sont discriminées suivant plusieurs dimensions.

Ici, ce sont :

-   lon : la longitude (de taille $1440=\frac{360}{0.25}$)
-   lat : la latitude (de taille $720=\frac{180}{0.25}$)
-   zlev : La hauteur de la surface de l'eau de mer
-   time : temps central de la journée

::: {.callout-note collapse="false"}
-   Les longitudes sont ordonnées de l'Est vers l'Ouest en partant du méridien de Greenwich depuis la valeur $0.125$ jusqu'à la valeur $0.125+1439*0.25=359.875$

-   Les latitudes sont ordonnées du Sud au Nord dans l'array `lat` en partant du pôle Sud depuis la valeur $-90+0.125=-89.875$ jusqu'à la valeur $-89.875+719*0.25=89.875$
:::

Il est possible d'avoir accès aux données des dimensions via la fonction `ncvar_get` et l'accès aux attributs avec la fonction `ncatt_get`

```{r}
#| label: info_dimensions
# get info about latitudes
lat <- ncvar_get(nc, "lat")
(lat_units <- ncatt_get(nc, "lat", "units"))
# get info about longitudes
lon <- ncvar_get(nc, "lon")
(lon_units <- ncatt_get(nc, "lon", "units"))
# get info about time
time <- ncvar_get(nc, "time")
(time_units <- ncatt_get(nc, "time", "units"))
time_as_date <- as.Date(time, origin = "1978-01-01 12:00:0", tz = "UTC")
# get info about zlev
zlev <- ncvar_get(nc, "zlev")
(zlev_units <- ncatt_get(nc, "zlev", "units"))
```

### Les variables principales

Nous avons quatre variables stockées dans le fichier :

-   sst : la température quotidienne de la surface de l'eau
-   anom : les anomalies quotidiennes de température de surface de l'eau
-   err : estimated error standard deviation of analysed_sst
-   ice : la concentration en glace

```{r}
#| label: info_variables
(nc_var <- names(nc$var))

# get info about variable attribute
get_var_attribute <- function(var, attribute) {
  nc_var <- names(nc$var)
  if (!(var %in% nc_var)) {
    message(paste("la variable", var, "est inexistante"))
  } else {
  ln <- ncatt_get(nc, var, attname = attribute)
  ifelse(ln$hasatt, ln$value, paste("pas d'attribut ", attribute))
  }
}

# long names
get_var_long_name <- function() {
  vapply(
  nc_var, 
  get_var_attribute, 
  FUN.VALUE = character(1), 
  "long_name"
  )
}
((get_var_long_name()))

# source
get_var_units <- function() {
  vapply(
  nc_var, 
  get_var_attribute, 
  FUN.VALUE = character(1), 
  "units"
  )
}
((get_var_units()))

# fill value
get_var_fill_value <- function() {
  vapply(
  nc_var, 
  get_var_attribute, 
  FUN.VALUE = numeric(1), 
  "_FillValue"
  )
}
((get_var_fill_value()))

```

### Les attributs globaux du fichier

```{r}
#| label: info_attributs_globaux
att <- c("title", "institution", "source", "references", "history", "Conventions") 
get_global_attribute <- function(att) {
  ncatt_get(nc, 0, att)$value
}
(global_attributes <- vapply(att, get_global_attribute, FUN.VALUE = character(1)))

```

## Exploration des variables

```{r}
#| label: load_variables

nc_var <- names(nc$var)

nc_charge_var <- function(var) {
  nc_var <- ncvar_get(nc = nc, varid = var )
  envir <- globalenv()
  assign(var, nc_var, envir = envir)
}

walk(nc_var, nc_charge_var)

```

La variable sst est enregistrée en tant que `r class(sst)` avec les dimensions `r dim(sst)`

-   La longitude correspond à la 1ère dimension (lignes de la matrice)

-   La latitude correspond à la 2ème dimension (colonnes de la matrice)

-   Le vecteur associé est obtenu en parcourant d'abord les 1440 longitudes d'un parallèle avant de passer à la latitude suivante.

```{r}
#| label: conversion_to_dataframe
lonlat <- expand.grid(lon, lat)
df_sst <- cbind(lonlat, as.vector(sst))
names(df_sst) <- c("lon", "lat", "sst")
head(df_sst)

```

## Affichage de la carte des données sst

Avec positionnement en rouge du point de test donné en exemple :

```{r}
#|label: plot_sst

df_sst |> 
  ggplot(aes(x = lon, y = lat, color = sst)) + 
  geom_point(size = 0.5) +
  coord_fixed(expand = FALSE) +
  scale_colour_distiller(palette = "RdBu") +
  labs(
    x = NULL,
    y = NULL,
    title = "Sea Surface Temperature",
    subtitle = time_as_date,
    caption = "Dataset: NOAA OISST V2.1",
    color = "°C"
  )
```

## Calcul de moyenne globale

Il semble qu'il faille appliquer un poids fonction de $\alpha$ en radians pour pondérer les mesures de surface en fonction de la latitude considérée.

Pour calculer ces poids j'ai construit tous les polygones "carrés" de 0.25° de côté suivant un même méridien.

Ces polygones ont pour centre les coordonnées (longitude et latitude) de la mesure SST correspondante.

J'ai ensuite calculé les aires de ces polygones avec le système de coordonnées de référence EPSG:4326 (WGS84).

Les poids relatifs à chaque mesure ont été fixés comme étant les ratio des aires obtenues avec celle de la plus grande aire (aire du polygone situé à l'équateur).

### Calcul des poids à affecter aux mesures suivant la latitude associée

```{r}
#| label: calculate_polygone_weights

# fonction génératrice de "carré géographique" de n degrés de côté
# le point de base (lon, lat) est le point inférieur gauche. 

polygone_geo <- function(lon, lat, n) {
  polygon_list <- list(rbind(
    c(lon, lat),
    c(lon + n, lat),
    c(lon + n, lat + n),
    c(lon, lat + n),
    c(lon, lat)
  ))
  st_polygon(polygon_list)
}

polygone_sfc <- seq(-90, 89.75, by = 0.25) |>
  map(\(x) polygone_geo(lon = 0, lat = x, n = 0.25)) |> 
  st_sfc(crs = "EPSG:4326")

area_weights <- as.numeric(st_area(polygone_sfc) / max(st_area(polygone_sfc)))

tib_area_weights <- as_tibble(area_weights)
names(tib_area_weights) <- c("n", "w")
write_csv2(tib_area_weights, 
           file = "DATA/area_weights")

```

```{r}
#| label: weighted_mean_sst

df_area_weights <- expand.grid(lon, area_weights)
names(df_area_weights) <- c("lon", "w")
w <- df_area_weights$w
df_sst_weights <- cbind(df_sst, w)

# moyenne pondérée globale
sst_weighted_mean <- df_sst_weights |> 
  summarize(wm_sst = weighted.mean(sst, w, na.rm = TRUE))
sst_weighted_mean

# moyenne pondérée entre -60°S et +60°N
df_sst_60S_60N <- df_sst_weights |> 
  filter(lat >= -60 & lat <= 60)
sst_weighted_mean_60S_60N <- df_sst_60S_60N |> 
  summarize(wm_sst_60S_60N = weighted.mean(sst, w, na.rm = TRUE))
sst_weighted_mean_60S_60N

```

Si nous souhaitons centrer la carte sur le méridien de Greenwich, il est nécessaire de translater les longitudes.

```{r}
#|label: plot_sst_greenwich

df_sst |> 
  mutate(lon = if_else(lon > 180, lon - 360, lon)) |> 
  ggplot(aes(x = lon, y = lat, fill = sst)) + 
  geom_raster() +
  scale_fill_gradient2(
    low = "darkblue",
    mid = "white",
    high = "darkred",
    midpoint = 15
  ) +
  coord_fixed(expand = FALSE) +
  #scale_colour_distiller(palette = "RdBu") +
  labs(
    x = NULL,
    y = NULL,
    title = "Sea Surface Temperature",
    subtitle = paste0(
      time_as_date,
      " - mean global = ",
      round(sst_weighted_mean, 2),
      " °Celsius",
      " | ",
      " mean World(60°S-60°N) = ",
      round(sst_weighted_mean_60S_60N, 2),
      " °Celsius"
    ),
    caption = "Dataset: NOAA OISST V2.1",
    fill = "°C",
  ) +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    # panel.background = element_rect(fill = "black"),
    # plot.background = element_rect(fill = "black")
  )

```
