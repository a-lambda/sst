---
title: "Chargement des données SST"
format: html
---


## Chargement de packages nécessaires

- `httr` pour le téléchargement des fichiers de données
- `tidyverse` pour les fonctionnalités offertes par 
  1. `ggplot2`, 
  2. `lubridate` pour la gestion du temps,
  3. `purrr`, entre autres.
- `terra`,
- `ncdf4` pour la gestion des fichiers NetCDF,
- `tictoc` pour des tests de vitesse


```{r}
#| label: load_libraries
#| message: false

libs <- c(
  "httr",
  "tidyverse",
  "terra",
  "ncdf4",
  "tictoc"
)

#install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
  install.packages(libs[!installed_libs])
}

#load libraries
invisible(lapply(libs, library, character.only = TRUE))

```


## Comptage des fichiers exploitables 

Les fichiers de données exploitables sont les fichiers ne comportant le suffixe ".nc".
Les fichiers de données en cours de finalisation comportent le suffixe "_preliminary.nc".
Le premier fichier NetCDF exploitable date du 1er septembre 1981.
En date du `Sys.Date()` nous allons déterminer quel est le dernier fichier exploitable.



```{r}
#| label: get_last_valid_sst_date

yyyymm <- function(date) { # transform Date '1981-06-25' to string '198106' 
  annee <- year(date)
  mois <- month(date)
  paste0(annee, if_else(mois > 9, as.character(mois), paste0("0", mois)))
}

yyyymmdd <- function(date) { # transform Date '1981-06-25' to string '19810625'
  annee <- year(date)
  mois <- month(date)
  jour <- day(date)
  paste0(
    annee,
    if_else(mois > 9, as.character(mois), paste0("0", mois)),
    if_else(jour > 9, as.character(jour), paste0("0", jour))
  )
}

sst_file_link <- function(date, ready = TRUE) {
  chaine_matrice <- ifelse(
    ready, 
    "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@/oisst-avhrr-v02r01.&.nc",
    "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@/oisst-avhrr-v02r01.&_preliminary.nc"
  )
  sub("@", yyyymm(date), sub("&", yyyymmdd(date), chaine_matrice))
}

get_last_valid_sst_date <- function() {
  valide <- FALSE
  date <- Sys.Date() - 2 # to be sure to have a preliminary file to test
  while (!valide) {
    if (status_code(GET(sst_file_link(date, ready = FALSE))) == 200) {
      date <- date - 1
    } else {
      if (status_code(GET(sst_file_link(date, ready = TRUE))) == 200) {
        valide <- TRUE
      }
    }
  }
  date
}

last_valid_sst_date <- get_last_valid_sst_date()
paste0("last valid sst date : ", last_valid_sst_date)
start_date <- ymd("1981-09-01") # date for the first sst file

number_of_sst_files <- interval(start_date, last_valid_sst_date) %/% days(1) + 1
paste0("number of sst files to consider : ", number_of_sst_files)

```


## Téléchargement des fichiers de données


```{r}
#| label: download_sst_files
#| echo: false

seq_days <- seq(
  start_date,
  last_valid_sst_date,
  by = "days"
)

# liste des fichiers à télécharger

root_access <- "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr"
string1 <- yyyymm(seq_days)
file_prefixe <- "oisst-avhrr-v02r01"
file_suffixe <- "nc"
string2 <- yyyymmdd(seq_days)

seq_oisst_files <- paste(root_access, string1, paste(file_prefixe, string2, file_suffixe, sep = "."), sep = "/")

# téléchargement de tous les fichiers depuis la date d'origine des mesures
# 
sst_file_link <- function(date) {
  chaine_matrice <- "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@/oisst-avhrr-v02r01.&.nc"
  sub("@", yyyymm(date), sub("&", yyyymmdd(date), chaine_matrice))
}

get_oisst_data <- function(date) {
  link <- sst_file_link(date)
  link_split <- strsplit(link, '/')[[1]]
  file_name <- link_split[length(link_split)]
  file_to_write <- paste("DATA", file_name, sep = "/")
  if (!file.exists(file_to_write)) {
    res <- httr::GET(
      link,
      write_disk(
        file_to_write,
        overwrite = TRUE
      ),
    progress()
    )
  }
}

walk(seq_days, get_oisst_data)

```


## Exploration du fichier NetCDF du 15 janvier 2024 (comme décrit [ici](https://pjbartlein.github.io/REarthSysSci/netCDF.html))


```{r}
#| label: load_nc_file

(nc <- nc_open("DATA/oisst-avhrr-v02r01.20240115.nc"))

```

```{r}
#| label: info_dimensions
# get info about latitudes
lat <- ncvar_get(nc, "lat")
lat_units <- ncatt_get(nc, "lat", "units")
# get info about longitudes
lon <- ncvar_get(nc, "lon")
lon_units <- ncatt_get(nc, "lon", "units")
# get info about time
time <- ncvar_get(nc, "time")
time_units <- ncatt_get(nc, "time", "units")
time_as_date <- as.Date(time, origin = "1978-01-01 12:00:0", tz = "UTC")
# get info about zlev
zlev <- ncvar_get(nc, "zlev")
zlev_units <- ncatt_get(nc, "zlev", "units")
```

```{r}
#| label: info_variables
nc_var <- names(nc$var)
print(paste("Variables disponibles :", paste(nc_var, collapse = ',')))

# get info about variable attribute
get_var_attribute <- function(var, attribute) {
  nc_var <- names(nc$var)
  if (!(var %in% nc_var)) {
    message(paste("la variable", var, "est inexistante"))
  } else {
  ln <- ncatt_get(nc, var, attname = attribute)
  ifelse(ln$hasatt, ln$value, paste("pas d'attribut ", attribute))
  }
}

# long names
get_var_long_name <- function() {
  vapply(
  nc_var, 
  get_var_attribute, 
  FUN.VALUE = character(1), 
  "long_name"
  )
}
print(get_var_long_name())

# source
get_var_units <- function() {
  vapply(
  nc_var, 
  get_var_attribute, 
  FUN.VALUE = character(1), 
  "units"
  )
}
print(get_var_units())

# fill value
get_var_fill_value <- function() {
  vapply(
  nc_var, 
  get_var_attribute, 
  FUN.VALUE = numeric(1), 
  "_FillValue"
  )
}
print(get_var_fill_value())

```

```{r}
#| label: info_attributs_globaux
att <- c("title", "institution", "source", "references", "history", "Conventions") 
get_global_attribute <- function(att) {
  ncatt_get(nc, 0, att)$value
}
global_attributes <- vapply(att, get_global_attribute, FUN.VALUE = character(1))
print(global_attributes)

```

```{r}
#| label: load_variables

nc_var <- names(nc$var)

nc_charge_var <- function(var) {
  nc_var <- ncvar_get(nc = nc, varid = var )
  envir <- globalenv()
  assign(var, nc_var, envir = envir)
}

walk(nc_var, nc_charge_var)

```

```{r}
#| label: conversion_to_dataframe
lonlat <- expand.grid(lon, lat)
tmp_sst <- as.vector(sst)
df_sst <- cbind(lonlat, tmp_sst)
names(df_sst) <- c("lon", "lat", "sst")
head(df_sst)
df_sst |> 
  ggplot(aes(x = lon, y = lat, color = sst)) + geom_point(size = 0.5)
```

```{r}
list_raster <- map(nc_var, \(x) rast(t(get(x))))
```

```{r}
walk(list_raster, \(x) plot(flip(x, direction = "vertical")))
```

