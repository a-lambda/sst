# Récupération des données SST

## Chargement de packages nécessaires

-   `httr` pour le téléchargement des fichiers de données
-   `tidyverse` pour les fonctionnalités offertes par
    1.  `ggplot2`,
    2.  `lubridate` pour la gestion du temps,
    3.  `purrr`, entre autres.
-   `terra`,
-   `ncdf4` pour la gestion des fichiers NetCDF,

```{r}
#| label: load_libraries
#| message: false

libs <- c(
  "glue",
  "httr",
  "tidyverse",
  "terra",
  "ncdf4"
)

#install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
  install.packages(libs[!installed_libs])
}

#load libraries
invisible(lapply(libs, library, character.only = TRUE))

```

## Décompte des fichiers exploitables 

Les fichiers de données NectCDF temporaires ont le suffixe "\_preliminary".   
Les autres ne possèdent pas ce suffixe.

Le premier fichier NetCDF exploitable date du 1er septembre 1981. 
En date du `Sys.Date()` nous allons déterminer :

- la date du dernier fichier finalisé disponible
- la date du dernier fichier temporaire disponible
- le nombre total de fichiers finalisés
- le nombre total de fichiers temporaires

```{r}
#| label: get_last_sst_dates

yyyymm <- function(date) { # transform Date '1981-06-25' to string '198106' 
  return(paste0(year(date), sprintf("%02d", month(date))))
}

yyyymmdd <- function(date) { # transform Date '1981-06-25' to string '19810625'
  return(
    paste0(
      year(date), 
      sprintf("%02d", month(date)), 
      sprintf("%02d", mday(date))
    )
  )
}

sst_data_url <- function(date, data_valid = TRUE) {
  # we use the constant part of the url and replace
  # - @ with 'yyyymm' part of the date
  # - & with 'yyyymmdd' part of the date
  # to get all the url links
  base_regex_url <- ifelse(
    data_valid, 
    "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@/oisst-avhrr-v02r01.&.nc",
    "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@/oisst-avhrr-v02r01.&_preliminary.nc"
  )
  sub("@", yyyymm(date), sub("&", yyyymmdd(date), base_regex_url))
}

get_last_data_dates <- function() {
  
  http_200_status_OK <- FALSE
  get_last_data_date <- function(date, data_valid) {
    while (!http_200_status_OK) { 
      http_status_code <- status_code(
        GET(sst_data_url(date = date, data_valid = data_valid))
      )
      if (http_status_code == 404) {
        date <- date - 1  
      } else {
        if (http_status_code == 200) {
          http_200_status_OK <- TRUE
        }
      }
    }
    return(date)
  }
  # get last date for preliminary file
  last_tempo_date <- get_last_data_date(Sys.Date(), data_valid = FALSE)
  # get last date for data with status OK
  date <- last_tempo_date - 13 # supposed to be also "preliminary data" date
  last_valid_date <- get_last_data_date(date, data_valid = TRUE)
  c(last_valid_date, last_tempo_date)
}

last_valid_date <- get_last_data_dates()[[1]]
paste0("Dernier fichier finalisé daté du : ", last_valid_date)

last_tempo_date <- get_last_data_dates()[[2]]
paste0("Dernier fichier temporaire daté du : ", last_tempo_date)

#--- date du premier fichier finalisé disponible
start_date <- ymd("1981-09-01")

number_of_nc_files <- 
  lubridate::interval(start_date, last_valid_date) %/% days(1) + 1

number_of_tempo_files <-
  lubridate::interval(last_valid_date, last_tempo_date) %/% days(1)

paste0("Nombre de fichiers finalisés : ", number_of_nc_files)

paste0("Nombre de fichiers temporaires : ", number_of_tempo_files)

```

## Remplissage de la table des fichiers de données

Création d'un tibble `tib_sst` composée des colonnes suivantes :

- date : date de récupération des données
- data_filename : nom local du fichier de données
- data_url : url permettant d'accéder aux données pour une date donnée

Remarque :

La problématique consiste à mettre à jour au fil de l'eau les données qui sont initialement enregistrées dans un fichier avec l'extension **preliminary.nc" le temps que les données soient "validées". Cette opération se déroule sur un délai d'approximativement 2 semaines à partir de la récupération des données.

```{r}
#| label: tib_sst_date

# Récupération dans tib_sst de toutes les dates associées au fichiers .nc

tib_sst <- tibble(date = seq(start_date, last_tempo_date, by = "days"))
```


```{r}
#| label: tib_sst_data_filename_and_url
#| 
# Récupération dans tib_sst des urls et noms de fichiers

get_url_variable_parts <- function(start_date, end_date, data_valid) {
  
  seq_days <- seq(start_date, end_date, by = "days")
  url_folder <- yyyymm(seq_days)
  file_prefixe <- "oisst-avhrr-v02r01."
  file_suffixe <- if_else(data_valid, ".nc", "_preliminary.nc")
  url_file <- paste0(file_prefixe, yyyymmdd(seq_days), file_suffixe)
  return(list(url_folder, url_file))
  
}
  
url_valid_variable_parts <- get_url_variable_parts(
  start_date = start_date,
  end_date = last_valid_date,
  data_valid = TRUE
)
  
url_preliminary_variable_parts <- get_url_variable_parts(
  start_date = last_valid_date + 1,
  end_date = last_tempo_date,
  data_valid = FALSE
)

tib_sst$data_filename <- c(url_valid_variable_parts[[2]], url_preliminary_variable_parts[[2]])

# Récupération dans tib_sst des urls des fichiers de données

root_url <- "https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr"

get_nc_urls <- function(url_link_parts) {
  
  return(paste(root_url, url_link_parts[[1]], url_link_parts[[2]], sep = "/"))
         
} 

urls_nc_valid <- get_nc_urls(url_valid_variable_parts)
urls_nc_preliminary <- get_nc_urls(url_preliminary_variable_parts)

tib_sst$data_url <- c(urls_nc_valid, urls_nc_preliminary)

```


```{r}
#| label: tib_sst_data_loaded
#| 
# data_loaded renseigne sur la présence du fichier en local (dossier DATA)

nc_files <- tib_sst$data_filename
nc_files_on_disk <- list.files(path = "DATA", pattern = "*.nc*")
tib_sst$data_loaded <- nc_files %in% nc_files_on_disk

# Suppression des fichiers temporaires inutiles

nc_files_to_delete <- nc_files_on_disk[!(nc_files_on_disk %in% nc_files)]
if (length(nc_files_to_delete > 0)) {
  unlink(paste("DATA", nc_files_to_delete, sep = "/"))
}

saveRDS(tib_sst, "DATA/tib_sst.RDS")

```

## Téléchargement des données SST (si nécessaire avec data_loaded == FALSE)

```{r}
#| label: data_download
#| message: false

get_nc_files_unloaded_data <- function(file_name, file_url) {
  file_path <- paste("DATA" , file_name, sep = "/")
  status_code <- status_code(GET(file_url))
  message(status_code)
  if (status_code == 200) {
    res <- httr::GET(file_url,
                     write_disk(file_path, overwrite = TRUE),
                     progress()
                    )
  } else {
    message(glue("The data for file {file_name} are inaccessible"))
  }
}

nc_files_unloaded <- tib_sst |> 
  dplyr::filter(!data_loaded)
nc_names <- nc_files_unloaded$data_filename
nc_urls <- nc_files_unloaded$data_url
# téléchargement des fichiers nc

pwalk(list(nc_names, nc_urls), get_nc_files_unloaded_data)

```
