[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fichiers NetCDF",
    "section": "",
    "text": "Preface"
  },
  {
    "objectID": "intro.html#présentation-des-données-exploitées",
    "href": "intro.html#présentation-des-données-exploitées",
    "title": "1  Introduction",
    "section": "1.1 Présentation des données exploitées",
    "text": "1.1 Présentation des données exploitées\nLe NOAA1 présente au travail du portail du NCEI2 un ensemble de données environnementales.\nNous allons ici considérer les relevés quotidiens de la température de surface de l’eau de mer au niveau mondial.\nLes données brutes recensées par différentes sondes (satellites, navires, bouées) sur un maillage régulier de 0,25° par 0,25° sont combinées et les lacunes sont comblées par interpolation.\nCes données traitées sont ensuite mises à disposition sur le site de la NOAA sour forme de fichiers NetCDF.\nElles sont accessibles ici sous la rubrique sea-surface-temperature-optimum-interpolation\nDes informations complémentaires sur cet ensemble de données sont disponibles ici.\nNous allons tenter de générer le même type de graphes temporels que ceux disponibles sur le site de Climate Reanalyzer et accessibles sur la page Daily Sea Surface Temperature."
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "1  Introduction",
    "section": "",
    "text": "National Oceanic and Atmospheric Administration↩︎\nNational Centers for Environmental Information↩︎"
  },
  {
    "objectID": "sst_dl.html#chargement-de-packages-nécessaires",
    "href": "sst_dl.html#chargement-de-packages-nécessaires",
    "title": "\n2  Récupération des données SST\n",
    "section": "\n2.1 Chargement de packages nécessaires",
    "text": "2.1 Chargement de packages nécessaires\n\n\nhttr pour le téléchargement des fichiers de données\n\ntidyverse pour les fonctionnalités offertes par\n\n\nggplot2,\n\nlubridate pour la gestion du temps,\n\npurrr, entre autres.\n\n\n\nterra,\n\nncdf4 pour la gestion des fichiers NetCDF,\n\n\nlibs &lt;- c(\n  \"httr\",\n  \"tidyverse\"\n)\n\n#install missing libraries\ninstalled_libs &lt;- libs %in% rownames(installed.packages())\nif (any(installed_libs == FALSE)) {\n  install.packages(libs[!installed_libs])\n}\n\n#load libraries\ninvisible(lapply(libs, library, character.only = TRUE))"
  },
  {
    "objectID": "sst_dl.html#décompte-des-fichiers-exploitables",
    "href": "sst_dl.html#décompte-des-fichiers-exploitables",
    "title": "\n2  Récupération des données SST\n",
    "section": "\n2.2 Décompte des fichiers exploitables",
    "text": "2.2 Décompte des fichiers exploitables\nLes fichiers de données NectCDF temporaires ont le suffixe “_preliminary”.\nLes autres ne possèdent pas ce suffixe.\nLe premier fichier NetCDF exploitable date du 1er septembre 1981. En date du Sys.Date() nous allons déterminer :\n\nla date du dernier fichier finalisé disponible\nla date du dernier fichier temporaire disponible\nle nombre total de fichiers finalisés\nle nombre total de fichiers temporaires\n\n\nyyyymm &lt;- function(date) { # transform Date '1981-06-25' to string '198106' \n  annee &lt;- year(date)\n  mois &lt;- month(date)\n  paste0(annee, if_else(mois &gt; 9, as.character(mois), paste0(\"0\", mois)))\n}\n\nyyyymmdd &lt;- function(date) { # transform Date '1981-06-25' to string '19810625'\n  annee &lt;- year(date)\n  mois &lt;- month(date)\n  jour &lt;- day(date)\n  paste0(\n    annee,\n    if_else(mois &gt; 9, as.character(mois), paste0(\"0\", mois)),\n    if_else(jour &gt; 9, as.character(jour), paste0(\"0\", jour))\n  )\n}\n\nsst_file_link &lt;- function(date, ready = TRUE) {\n  chaine_matrice &lt;- ifelse(\n    ready, \n    \"https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@/oisst-avhrr-v02r01.&.nc\",\n    \"https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@/oisst-avhrr-v02r01.&_preliminary.nc\"\n  )\n  sub(\"@\", yyyymm(date), sub(\"&\", yyyymmdd(date), chaine_matrice))\n}\n\nget_last_valid_data_dates &lt;- function() {\n  valide &lt;- FALSE\n  last_tempo_date &lt;- Sys.Date() - 1\n  # get last date for preliminary file\n  while (!valide) { \n    http_status_code &lt;- status_code(\n      GET(sst_file_link(last_tempo_date, ready = FALSE))\n    )\n    if (http_status_code == 404) {\n      last_tempo_date &lt;- last_tempo_date - 1  \n    } else {\n      if (http_status_code == 200) {\n        valide &lt;- TRUE\n      }\n    }\n  }\n  valide &lt;- FALSE\n  last_valid_date &lt;- last_tempo_date - 13 # supposed to be preliminary data\n  while (!valide) {\n    http_status_code &lt;- status_code(\n      GET(sst_file_link(last_valid_date, ready = TRUE))\n    )\n    if (http_status_code == 404) {\n      last_valid_date &lt;- last_valid_date - 1\n    } else {\n      if (http_status_code == 200) {\n        valide &lt;- TRUE\n      }\n    }\n  }\n  c(last_valid_date, last_tempo_date)\n}\n\nlast_valid_date &lt;- get_last_valid_data_dates()[[1]]\npaste0(\"Dernier fichier finalisé daté du : \", last_valid_date)\n\n[1] \"Dernier fichier finalisé daté du : 2024-01-27\"\n\nlast_tempo_date &lt;- get_last_valid_data_dates()[[2]]\npaste0(\"Dernier fichier temporaire daté du : \", last_tempo_date)\n\n[1] \"Dernier fichier temporaire daté du : 2024-02-11\"\n\n#--- date du premier fichier finalisé disponible\nstart_date &lt;- ymd(\"1981-09-01\")\n\nnumber_of_nc_files &lt;- interval(start_date, last_valid_date) %/% days(1) + 1\nnumber_of_tempo_files &lt;-\n  interval(last_valid_date, last_tempo_date) %/% days(1)\npaste0(\"Nombre de fichiers finalisés : \", number_of_nc_files)\n\n[1] \"Nombre de fichiers finalisés : 15489\"\n\npaste0(\"Nombre de fichiers temporaires : \", number_of_tempo_files)\n\n[1] \"Nombre de fichiers temporaires : 15\""
  },
  {
    "objectID": "sst_dl.html#téléchargement-des-fichiers-de-données",
    "href": "sst_dl.html#téléchargement-des-fichiers-de-données",
    "title": "\n2  Récupération des données SST\n",
    "section": "\n2.3 Téléchargement des fichiers de données",
    "text": "2.3 Téléchargement des fichiers de données\n\n# séquence des jours associés aux fichiers nc\nseq_days_nc_files &lt;- seq(\n  start_date,\n  last_tempo_date,\n  by = \"days\"\n)\n\n# liste des fichiers à télécharger\n\nget_nc_files &lt;- function() {\n  \n  root_access &lt;- \"https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr\"\n  file_prefixe &lt;- \"oisst-avhrr-v02r01\"\n  file_suffixe &lt;- \"nc\"\n\n  seq_days_regular_nc_files &lt;- seq(\n    start_date,\n    last_valid_date,\n    by = \"days\"\n  )\n\n  seq_days_temp_nc_file &lt;- seq(\n    last_valid_date + 1,\n    last_tempo_date,\n    by = \"days\"\n  )\n\n  dir_regular &lt;- yyyymm(seq_days_regular_nc_files)\n  dir_temp &lt;- yyyymm(seq_days_temp_nc_file)\n  string_regular &lt;- yyyymmdd(seq_days_regular_nc_files)\n  string_temp &lt;- yyyymmdd(seq_days_temp_nc_file)\n  \n  seq_regular_nc_files &lt;- paste(\n    root_access, \n    dir_regular, \n    paste(\n      file_prefixe, \n      string_regular, \n      file_suffixe, \n      sep = \".\"\n    ), \n    sep = \"/\"\n  )\n\n  seq_temp_nc_files &lt;- paste(\n    root_access, \n    dir_temp, \n    paste(\n      file_prefixe, \n      paste0(string_temp, \"_preliminary\"),\n      file_suffixe,\n      sep = \".\"\n    ), \n    sep = \"/\"\n  )\n\n  list(seq_regular_nc_files, seq_temp_nc_files)\n}\n\nnc_regular_files &lt;- get_nc_files()[[1]]\nnc_temp_files &lt;- get_nc_files()[[2]]\n\n# téléchargement de tous les fichiers depuis la date d'origine des mesures\n# \nsst_file_link &lt;- function(date) {\n  filename &lt;- if_else(\n    date &gt; last_valid_date,\n    \"oisst-avhrr-v02r01.&_preliminary.nc\",\n    \"oisst-avhrr-v02r01.&.nc\"\n  )\n  regex_file_link &lt;- paste(\n    \"https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/@\",\n    filename,\n    sep = \"/\"\n  )  \n  sub(\"@\", yyyymm(date), sub(\"&\", yyyymmdd(date), regex_file_link))\n}\n\nget_oisst_data &lt;- function(date) {\n  link &lt;- sst_file_link(date)\n  link_split &lt;- strsplit(link, '/')[[1]]\n  file_name &lt;- link_split[length(link_split)]\n  file_to_write &lt;- paste(\"DATA\" , file_name, sep = \"/\")\n  if (!file.exists(file_to_write)) {\n    res &lt;- httr::GET(\n      link,\n      write_disk(\n        file_to_write,\n        overwrite = TRUE\n      ),\n      progress()\n    ) \n  } \n}\n\n# téléchargement des fichiers nc\nwalk(seq_days_nc_files, get_oisst_data)\n\n# nettoyage des fichiers temporary superflus\n\ndel_extra_temp_nc_files &lt;- function() {\n  stored_temp_files &lt;- list.files(\"DATA\", pattern = \"_preliminary.nc\")\n  nc_temp_files_split &lt;- strsplit(nc_temp_files, '/')\n  actual_temp_files &lt;- vapply(\n    nc_temp_files_split, \n    \\(x) x[length(x)], \n    character(1)\n  )\n  temp_files_to_delete &lt;- \n    stored_temp_files[!(stored_temp_files %in% actual_temp_files)]\n  if (length(temp_files_to_delete) &gt; 0) {\n    unlink(paste(\".\", \"DATA\", temp_files_to_delete, sep = '/'))\n  }\n}\n\n# do it  \ndel_extra_temp_nc_files()"
  },
  {
    "objectID": "timeseries.html#chargement-librairies-utiles",
    "href": "timeseries.html#chargement-librairies-utiles",
    "title": "\n3  Données temporelles\n",
    "section": "\n3.1 chargement librairies utiles",
    "text": "3.1 chargement librairies utiles\n\nlibs &lt;- c(\n  \"ncdf4\",\n  \"tidyverse\",\n  \"data.table\",\n  \"jsonlite\",\n  \"tictoc\",\n  \"fpp3\"\n)\n#install missing libraries\ninstalled_libs &lt;- libs %in% rownames(installed.packages())\nif (any(installed_libs == FALSE)) {\n  install.packages(libs[!installed_libs])\n}\n#load libraries\ninvisible(lapply(libs, library, character.only = TRUE))"
  },
  {
    "objectID": "timeseries.html#fonctions-de-base-peut-être-disponibles-dans-lubridate",
    "href": "timeseries.html#fonctions-de-base-peut-être-disponibles-dans-lubridate",
    "title": "\n3  Données temporelles\n",
    "section": "\n3.2 fonctions de base (peut-être disponibles dans lubridate)",
    "text": "3.2 fonctions de base (peut-être disponibles dans lubridate)\n\nyyyymm &lt;- function(date) { # transform Date '1981-06-25' to string '198106' \n  annee &lt;- year(date)\n  mois &lt;- month(date)\n  paste0(annee, if_else(mois &gt; 9, as.character(mois), paste0(\"0\", mois)))\n}\n\nyyyymmdd &lt;- function(date) { # transform Date '1981-06-25' to string '19810625'\n  annee &lt;- year(date)\n  mois &lt;- month(date)\n  jour &lt;- day(date)\n  paste0(\n    annee,\n    if_else(mois &gt; 9, as.character(mois), paste0(\"0\", mois)),\n    if_else(jour &gt; 9, as.character(jour), paste0(\"0\", jour))\n  )\n}"
  },
  {
    "objectID": "timeseries.html#weights-to-apply-to-square-of-0.25x0.25-along-the-latitude",
    "href": "timeseries.html#weights-to-apply-to-square-of-0.25x0.25-along-the-latitude",
    "title": "\n3  Données temporelles\n",
    "section": "\n3.3 weights to apply to square of 0.25°x0.25° along the latitude",
    "text": "3.3 weights to apply to square of 0.25°x0.25° along the latitude\n\narea_weights &lt;- fread(\n  file = \"area_weights.csv\",\n  dec = \",\"\n) |&gt; pull( w )"
  },
  {
    "objectID": "timeseries.html#fonctions-de-calcul-de-moyenne-pondérée",
    "href": "timeseries.html#fonctions-de-calcul-de-moyenne-pondérée",
    "title": "\n3  Données temporelles\n",
    "section": "\n3.4 fonctions de calcul de moyenne pondérée",
    "text": "3.4 fonctions de calcul de moyenne pondérée\nLe principe consiste à détecter un fichier de moyenne (fichier RDS) déjà présent ou pas.\nSi ce dernier est présent il est lu et complété.\nDans le cas contraire la constition de ce fichier est réalisée à partir de tous les fichiers NetCDF contenus dans le répertoire DATA.\nSi le fichier pris en compte est un fichier temporaire (suffixe _preliminary) on attribuera à la donnée un status_ok de valeur \\(FALSE\\)\nSi le fichier pris en compte est un fichier finalisé status_okvaudra \\(TRUE\\)\n\n# get weighted mean of one variable between lat_min and lat_max\nget_var_weighted_mean &lt;- function(file, var, lat_min, lat_max) {\n  # are we consider preliminary file\n  status_ok &lt;- if_else(str_detect(file, '_preliminary'), FALSE, TRUE)\n  #--- get data from NetCDF file\n  nc &lt;- nc_open(file)\n  lat &lt;- ncvar_get(nc, varid = \"lat\")\n  time &lt;- ncvar_get(nc, varid = \"time\")\n  var &lt;- ncvar_get(nc, varid = var)\n  nc_close(nc)\n  #--- create the area_weights matrix\n  w &lt;- matrix(rep(area_weights, 1440), ncol = 720, byrow = TRUE)\n  i_min &lt;- min(which(lat &gt;= lat_min))\n  i_max &lt;- max(which(lat &lt;= lat_max))\n  #--- calculate weighted mean\n  wm_var_60S_60N &lt;- weighted.mean(\n    var[,i_min:i_max], \n    w[,i_min:i_max], \n    na.rm = TRUE\n  )\n  #--- \n  c(time, wm_var_60S_60N, status_ok)\n}\n\n# get all weighted mean for one variable for all NetCDF files available\nget_var_all_weighted_mean &lt;- function(var, lat_min, lat_max) {\n  files &lt;- list.files(path = \"DATA\", pattern = \"*.nc\", full.names = TRUE)\n  if (length(files) &gt; 0 ) {\n    #--- RDS file format : weighted_mean_&lt;var&gt;_XXXS_XXXN.RDS\n    RDS_file &lt;- paste0(\n      'weighted_mean_', var, '_', abs(lat_min), 'S_', abs(lat_max), 'N.RDS'\n    )\n    if (file.exists(RDS_file)) {\n      #--- return valid files which mean have already been treated\n      RDS_data &lt;- readRDS(RDS_file)\n      valid_files_already_treated &lt;- RDS_data |&gt;\n        filter(status_ok) |&gt; \n        pull(date) |&gt; \n        yyyymmdd() |&gt; \n        vapply(\\(x) paste0('DATA/oisst-avhrr-v02r01.', x, '.nc'), character(1))\n      #--- return tempo files which mean have already been treated\n      tempo_files_already_treated &lt;- RDS_data |&gt;\n        filter(!status_ok) |&gt; \n        pull(date) |&gt; \n        yyyymmdd() |&gt; \n        vapply(\\(x) paste0('DATA/oisst-avhrr-v02r01.', x, '_preliminary.nc'), character(1))\n      files_treated &lt;- c(valid_files_already_treated, tempo_files_already_treated)\n      files_to_treat &lt;- files[!(files %in% files_treated)]\n    } else {\n      files_to_treat &lt;- files\n    }\n    if (length(files_to_treat) &gt; 0) {\n      #--- be aware not to consider old tempo files for later version !!!\n      origin_date &lt;- ymd(\"1978-01-01\")\n      wm_matrix &lt;- matrix(numeric(0), nrow = length(files_to_treat), ncol = 3)\n      colnames(wm_matrix) &lt;- c('time', 'wm', 'status_ok')\n      for (i in seq_along(files_to_treat)) { \n        result &lt;- get_var_weighted_mean(files_to_treat[i], var, lat_min, lat_max)\n        wm_matrix[i, 1] &lt;- result[1] # time in days from origin date\n        wm_matrix[i, 2] &lt;- result[2] # weighted mean\n        wm_matrix[i, 3] &lt;- result[3] # status\n      }\n      df_wm_var &lt;- as_tibble(wm_matrix) |&gt;\n        set_names('time', paste0('wm_', var), 'status_ok') |&gt; \n        mutate(\n          date = lubridate::as_date(time, origin = origin_date),\n          status_ok = as.logical(status_ok)\n        )\n      if (file.exists(RDS_file)) {\n        df_wm_var &lt;- rbind(RDS_data, df_wm_var)\n      }\n      df_wm_var\n    } else {\n      if (file.exists(RDS_file)) {\n        RDS_data\n      }\n    }\n  } else { \n    message(\"aucun fichier de données à traiter\") \n  }\n}"
  },
  {
    "objectID": "timeseries.html#calcul-des-moyennes-pondérées-pour-des-latitutes-comprises-entre--60-et-60",
    "href": "timeseries.html#calcul-des-moyennes-pondérées-pour-des-latitutes-comprises-entre--60-et-60",
    "title": "\n3  Données temporelles\n",
    "section": "\n3.5 calcul des moyennes pondérées pour des latitutes comprises entre -60° et 60°",
    "text": "3.5 calcul des moyennes pondérées pour des latitutes comprises entre -60° et 60°\nLes moyennes pondérées sont calculées consécutivement sur les variables :\n\nsst\nanom\nerr\nice\n\n\n# get weighted mean var with -60 &lt; latitude &lt; 60\n\ndf_wm_sst_60S_60N &lt;- get_var_all_weighted_mean(\"sst\", -60, 60)\nsaveRDS(df_wm_sst_60S_60N, 'weighted_mean_sst_60S_60N.RDS')\n\ndf_wm_anom_60S_60N &lt;- get_var_all_weighted_mean(\"anom\", -60, 60)\nsaveRDS(df_wm_anom_60S_60N, 'weighted_mean_anom_60S_60N.RDS')\n\ndf_wm_err_60S_60N &lt;- get_var_all_weighted_mean(\"err\", -60, 60)\nsaveRDS(df_wm_err_60S_60N, 'weighted_mean_err_60S_60N.RDS')\n\ndf_wm_ice_60S_60N &lt;- get_var_all_weighted_mean(\"ice\", -60, 60)\nsaveRDS(df_wm_ice_60S_60N, 'weighted_mean_ice_60S_60N.RDS')"
  },
  {
    "objectID": "timeseries.html#calcul-des-moyennes-pondérées-pour-lensemble-du-globe--90-latitude-90",
    "href": "timeseries.html#calcul-des-moyennes-pondérées-pour-lensemble-du-globe--90-latitude-90",
    "title": "\n3  Données temporelles\n",
    "section": "\n3.6 calcul des moyennes pondérées pour l’ensemble du globe (-90° < latitude < 90°)",
    "text": "3.6 calcul des moyennes pondérées pour l’ensemble du globe (-90° &lt; latitude &lt; 90°)\nLes mêmes variables que précédemment sont prises en compte.\n\ndf_wm_sst_90S_90N &lt;- get_var_all_weighted_mean(\"sst\", -90, 90)\nsaveRDS(df_wm_sst_90S_90N, 'weighted_mean_sst_90S_90N.RDS')\n\ndf_wm_anom_90S_90N &lt;- get_var_all_weighted_mean(\"anom\", -90, 90)\nsaveRDS(df_wm_anom_90S_90N, 'weighted_mean_anom_90S_90N.RDS')\n\ndf_wm_err_90S_90N &lt;- get_var_all_weighted_mean(\"err\", -90, 90)\nsaveRDS(df_wm_err_90S_90N, 'weighted_mean_err_90S_90N.RDS')\n\ndf_wm_ice_90S_90N &lt;- get_var_all_weighted_mean(\"ice\", -90, 90)\nsaveRDS(df_wm_ice_90S_90N, 'weighted_mean_ice_90S_90N.RDS')"
  },
  {
    "objectID": "timeseries.html#impression-de-la-série-temporelle",
    "href": "timeseries.html#impression-de-la-série-temporelle",
    "title": "\n3  Données temporelles\n",
    "section": "\n3.7 Impression de la série temporelle",
    "text": "3.7 Impression de la série temporelle\n\nsst_60S_60N &lt;- readRDS('weighted_mean_sst_60S_60N.RDS') |&gt; \n  mutate(\n    year = year(date),\n    yday = yday(date),\n    month = month(date)\n    ) \n    \nggplot(data = sst_60S_60N,\n       aes(x = yday, y = wm_sst, group = year)) +\n  geom_line(aes(color = factor(year))) +\n  scale_color_grey(start = 0.8, end = 0.2) +\n  geom_line(\n    data = sst_60S_60N |&gt; filter(year == 2023),\n    aes(x = yday, y = wm_sst),\n    color = \"orange\",\n    linewidth = 1) +\n  geom_line(\n    data = sst_60S_60N |&gt; filter(year == 2024),\n    aes(x = yday, y = wm_sst, group = year),\n    color = \"black\", \n    linewidth = 1) +\n  labs(\n    title = \"Daily Sea Surface Temperature, World (60°S-60°N, 0-360°E)\",\n    subtitle = \"Dataset: NOAA OISST V2.1\",\n    caption = 'caption test',\n    color = NULL,\n    x = NULL,\n    y = NULL\n  ) -&gt; p\n\np + \n  theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    plot.caption = element_text(margin = margin(t = 0, unit = 'cm')),\n    legend.spacing.x = unit(0.5, 'cm'),\n    legend.key = element_blank(),\n    legend.text = element_text(colour = 'black'),\n  ) +\n  guides(\n    color = guide_legend(\n      ncol = 7, \n      byrow = TRUE, \n      reverse = FALSE,\n      label = TRUE,\n      #label.hjust = 1,\n      #keywidth = unit(0.8, 'cm'),\n      label.position = \"right\",\n      x.intersp = 0.2,\n      text.width = 0.045\n    )\n  )"
  },
  {
    "objectID": "timeseries.html#impression-supplémentaire-1",
    "href": "timeseries.html#impression-supplémentaire-1",
    "title": "\n3  Données temporelles\n",
    "section": "\n3.8 impression supplémentaire 1",
    "text": "3.8 impression supplémentaire 1\n\nggplot(data = sst_60S_60N,\n       aes(x = date, y = wm_sst)) +\n  geom_line() +\n  geom_smooth(\n    method = \"lm\",\n    se = FALSE\n  ) + \n  geom_smooth(\n    data = sst_60S_60N |&gt; \n      filter(year &gt; 2000),\n    method = \"lm\",\n    se = FALSE, colour = \"#FFA050\"\n  ) +\n  geom_smooth(\n    data = sst_60S_60N |&gt; \n      filter(year &gt; 2010),\n    method = \"lm\",\n    se = FALSE, colour = \"#FF0000\"\n  )\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "timeseries.html#impression-supplémentaire-2",
    "href": "timeseries.html#impression-supplémentaire-2",
    "title": "\n3  Données temporelles\n",
    "section": "\n3.9 impression supplémentaire 2",
    "text": "3.9 impression supplémentaire 2\n\nsst_90S_90N &lt;- readRDS(\"weighted_mean_sst_90S_90N.RDS\") |&gt; \n  mutate(year = year(date))\nggplot(data = sst_90S_90N) +\n  geom_line(aes(x = date, y = wm_sst, group = year, color = year))"
  },
  {
    "objectID": "sst_example.html#exploration-du-fichier-netcdf-comme-décrit-ici",
    "href": "sst_example.html#exploration-du-fichier-netcdf-comme-décrit-ici",
    "title": "\n4  Données SST du 6 janvier 2024\n",
    "section": "\n4.1 Exploration du fichier NetCDF (comme décrit ici)",
    "text": "4.1 Exploration du fichier NetCDF (comme décrit ici)\n\nlibs &lt;- c(\n  \"ncdf4\",\n  \"tidyverse\",\n  \"terra\",\n  \"sf\"\n)\n\n#install missing libraries\ninstalled_libs &lt;- libs %in% rownames(installed.packages())\nif (any(installed_libs == FALSE)) {\n  install.packages(libs[!installed_libs])\n}\n\n#load libraries\ninvisible(lapply(libs, library, character.only = TRUE))\n\nLa connexion au fichier NetCDF s’opère via la commande nc_open.\nGrâce à elle nous pouvons déjà voir quel type d’informations sont enregistrées.\n\n(nc &lt;- nc_open(\"DATA/oisst-avhrr-v02r01.20240106.nc\"))\n\nFile DATA/oisst-avhrr-v02r01.20240106.nc (NC_FORMAT_NETCDF4):\n\n     4 variables (excluding dimension variables):\n        short sst[lon,lat,zlev,time]   (Chunking: [1440,720,1,1])  (Compression: shuffle,level 4)\n            long_name: Daily sea surface temperature\n            units: Celsius\n            _FillValue: -999\n            add_offset: 0\n            scale_factor: 0.00999999977648258\n            valid_min: -300\n            valid_max: 4500\n        short anom[lon,lat,zlev,time]   (Chunking: [1440,720,1,1])  (Compression: shuffle,level 4)\n            long_name: Daily sea surface temperature anomalies\n            units: Celsius\n            _FillValue: -999\n            add_offset: 0\n            scale_factor: 0.00999999977648258\n            valid_min: -1200\n            valid_max: 1200\n        short err[lon,lat,zlev,time]   (Chunking: [1440,720,1,1])  (Compression: shuffle,level 4)\n            long_name: Estimated error standard deviation of analysed_sst\n            units: Celsius\n            _FillValue: -999\n            add_offset: 0\n            scale_factor: 0.00999999977648258\n            valid_min: 0\n            valid_max: 1000\n        short ice[lon,lat,zlev,time]   (Chunking: [1440,720,1,1])  (Compression: shuffle,level 4)\n            long_name: Sea ice concentration\n            units: %\n            _FillValue: -999\n            add_offset: 0\n            scale_factor: 0.00999999977648258\n            valid_min: 0\n            valid_max: 100\n\n     4 dimensions:\n        time  Size:1   *** is unlimited *** \n            long_name: Center time of the day\n            units: days since 1978-01-01 12:00:00\n        zlev  Size:1 \n            long_name: Sea surface height\n            units: meters\n            positive: down\n            actual_range: 0, 0\n        lat  Size:720 \n            long_name: Latitude\n            units: degrees_north\n            grids: Uniform grid from -89.875 to 89.875 by 0.25\n        lon  Size:1440 \n            long_name: Longitude\n            units: degrees_east\n            grids: Uniform grid from 0.125 to 359.875 by 0.25\n\n    37 global attributes:\n        Conventions: CF-1.6, ACDD-1.3\n        title: NOAA/NCEI 1/4 Degree Daily Optimum Interpolation Sea Surface Temperature (OISST) Analysis, Version 2.1 - Final\n        references: Reynolds, et al.(2007) Daily High-Resolution-Blended Analyses for Sea Surface Temperature (available at https://doi.org/10.1175/2007JCLI1824.1). Banzon, et al.(2016) A long-term record of blended satellite and in situ sea-surface temperature for climate monitoring, modeling and environmental studies (available at https://doi.org/10.5194/essd-8-165-2016). Huang et al. (2020) Improvements of the Daily Optimum Interpolation Sea Surface Temperature (DOISST) Version v02r01, submitted.Climatology is based on 1971-2000 OI.v2 SST. Satellite data: Pathfinder AVHRR SST, Navy AVHRR SST, and NOAA ACSPO SST. Ice data: NCEP Ice and GSFC Ice.\n        source: ICOADS, NCEP_GTS, GSFC_ICE, NCEP_ICE, Pathfinder_AVHRR, Navy_AVHRR, NOAA_ACSP\n        id: oisst-avhrr-v02r01.20240106.nc\n        naming_authority: gov.noaa.ncei\n        summary: NOAAs 1/4-degree Daily Optimum Interpolation Sea Surface Temperature (OISST) (sometimes referred to as Reynolds SST, which however also refers to earlier products at different resolution), currently available as version v02r01, is created by interpolating and extrapolating SST observations from different sources, resulting in a smoothed complete field. The sources of data are satellite (AVHRR) and in situ platforms (i.e., ships and buoys), and the specific datasets employed may change over time. At the marginal ice zone, sea ice concentrations are used to generate proxy SSTs.  A preliminary version of this file is produced in near-real time (1-day latency), and then replaced with a final version after 2 weeks. Note that this is the AVHRR-ONLY DOISST, available from Oct 1981, but there is a companion DOISST product that includes microwave satellite data, available from June 2002\n        cdm_data_type: Grid\n        history: Final file created using preliminary as first guess, and 3 days of AVHRR data. Preliminary uses only 1 day of AVHRR data.\n        date_modified: 2024-01-21T09:12:00Z\n        date_created: 2024-01-21T09:12:00Z\n        product_version: Version v02r01\n        processing_level: NOAA Level 4\n        institution: NOAA/National Centers for Environmental Information\n        creator_url: https://www.ncei.noaa.gov/\n        creator_email: oisst-help@noaa.gov\n        keywords: Earth Science &gt; Oceans &gt; Ocean Temperature &gt; Sea Surface Temperature\n        keywords_vocabulary: Global Change Master Directory (GCMD) Earth Science Keywords\n        platform: Ships, buoys, Argo floats, MetOp-A, MetOp-B\n        platform_vocabulary: Global Change Master Directory (GCMD) Platform Keywords\n        instrument: Earth Remote Sensing Instruments &gt; Passive Remote Sensing &gt; Spectrometers/Radiometers &gt; Imaging Spectrometers/Radiometers &gt; AVHRR &gt; Advanced Very High Resolution Radiometer\n        instrument_vocabulary: Global Change Master Directory (GCMD) Instrument Keywords\n        standard_name_vocabulary: CF Standard Name Table (v40, 25 January 2017)\n        geospatial_lat_min: -90\n        geospatial_lat_max: 90\n        geospatial_lon_min: 0\n        geospatial_lon_max: 360\n        geospatial_lat_units: degrees_north\n        geospatial_lat_resolution: 0.25\n        geospatial_lon_units: degrees_east\n        geospatial_lon_resolution: 0.25\n        time_coverage_start: 2024-01-06T00:00:00Z\n        time_coverage_end: 2024-01-06T23:59:59Z\n        metadata_link: https://doi.org/10.25921/RE9P-PT57\n        ncei_template_version: NCEI_NetCDF_Grid_Template_v2.0\n        comment: Data was converted from NetCDF-3 to NetCDF-4 format with metadata updates in November 2017.\n        sensor: Thermometer, AVHRR\n\n\nLes dimensions\nles variables principales sont discriminées suivant plusieurs dimensions.\nIci, ce sont :\n\nlon : la longitude (de taille 1440)\nlat : la latitude (de taille 720)\nzlev : La hauteur de la surface de l’eau de mer\ntime : temps central de la journée\n\nIl est possible d’avoir accès aux données des dimensions via la fonction ncvar_get et l’accès aux attributs avec la fonction ncatt_get\n\n# get info about latitudes\nlat &lt;- ncvar_get(nc, \"lat\")\n(lat_units &lt;- ncatt_get(nc, \"lat\", \"units\"))\n\n$hasatt\n[1] TRUE\n\n$value\n[1] \"degrees_north\"\n\n# get info about longitudes\nlon &lt;- ncvar_get(nc, \"lon\")\n(lon_units &lt;- ncatt_get(nc, \"lon\", \"units\"))\n\n$hasatt\n[1] TRUE\n\n$value\n[1] \"degrees_east\"\n\n# get info about time\ntime &lt;- ncvar_get(nc, \"time\")\n(time_units &lt;- ncatt_get(nc, \"time\", \"units\"))\n\n$hasatt\n[1] TRUE\n\n$value\n[1] \"days since 1978-01-01 12:00:00\"\n\ntime_as_date &lt;- as.Date(time, origin = \"1978-01-01 12:00:0\", tz = \"UTC\")\n# get info about zlev\nzlev &lt;- ncvar_get(nc, \"zlev\")\n(zlev_units &lt;- ncatt_get(nc, \"zlev\", \"units\"))\n\n$hasatt\n[1] TRUE\n\n$value\n[1] \"meters\"\n\n\nLes variables principales\nNous avons quatre variables stockées dans le fichier :\n\nsst : la température quotidienne de la surface de l’eau\nanom : les anomalies quotidiennes de température de surface de l’eau\nerr : estimated error standard deviation of analysed_sst\nice : la concentration en glace\n\n\n(nc_var &lt;- names(nc$var))\n\n[1] \"sst\"  \"anom\" \"err\"  \"ice\" \n\n# get info about variable attribute\nget_var_attribute &lt;- function(var, attribute) {\n  nc_var &lt;- names(nc$var)\n  if (!(var %in% nc_var)) {\n    message(paste(\"la variable\", var, \"est inexistante\"))\n  } else {\n  ln &lt;- ncatt_get(nc, var, attname = attribute)\n  ifelse(ln$hasatt, ln$value, paste(\"pas d'attribut \", attribute))\n  }\n}\n\n# long names\nget_var_long_name &lt;- function() {\n  vapply(\n  nc_var, \n  get_var_attribute, \n  FUN.VALUE = character(1), \n  \"long_name\"\n  )\n}\n((get_var_long_name()))\n\n                                                 sst \n                     \"Daily sea surface temperature\" \n                                                anom \n           \"Daily sea surface temperature anomalies\" \n                                                 err \n\"Estimated error standard deviation of analysed_sst\" \n                                                 ice \n                             \"Sea ice concentration\" \n\n# source\nget_var_units &lt;- function() {\n  vapply(\n  nc_var, \n  get_var_attribute, \n  FUN.VALUE = character(1), \n  \"units\"\n  )\n}\n((get_var_units()))\n\n      sst      anom       err       ice \n\"Celsius\" \"Celsius\" \"Celsius\"       \"%\" \n\n# fill value\nget_var_fill_value &lt;- function() {\n  vapply(\n  nc_var, \n  get_var_attribute, \n  FUN.VALUE = numeric(1), \n  \"_FillValue\"\n  )\n}\n((get_var_fill_value()))\n\n sst anom  err  ice \n-999 -999 -999 -999 \n\n\nLes attributs globaux du fichier\n\natt &lt;- c(\"title\", \"institution\", \"source\", \"references\", \"history\", \"Conventions\") \nget_global_attribute &lt;- function(att) {\n  ncatt_get(nc, 0, att)$value\n}\n(global_attributes &lt;- vapply(att, get_global_attribute, FUN.VALUE = character(1)))\n\ntitle \negree Daily Optimum Interpolation Sea Surface Temperature (OISST) Analysis, Version 2.1 - Final\" \ninstitution \national Centers for Environmental Information\" \nsource \nathfinder_AVHRR, Navy_AVHRR, NOAA_ACSP\" \nreferences \n\"Reynolds, et al.(2007) Daily High-Resolution-Blended Analyses for Sea Surface Temperature (available at https://doi.org/10.1175/2007JCLI1824.1). Banzon, et al.(2016) A long-term record of blended satellite and in situ sea-surface temperature for climate monitoring, modeling and environmental studies (available at https://doi.org/10.5194/essd-8-165-2016). Huang et al. (2020) Improvements of the Daily Optimum Interpolation Sea Surface Temperature (DOISST) Version v02r01, submitted.Climatology is based on 1971-2000 OI.v2 SST. Satellite data: Pathfinder AVHRR SST, Navy AVHRR SST, and NOAA ACSPO SST. Ice data: NCEP Ice and GSFC Ice.\" \nhistory \ninal file created using preliminary as first guess, and 3 days of AVHRR data. Preliminary uses only 1 day of AVHRR data.\" \nonventions \n
  },
  {
    "objectID": "sst_example.html#exploration-des-variables",
    "href": "sst_example.html#exploration-des-variables",
    "title": "\n4  Données SST du 6 janvier 2024\n",
    "section": "\n4.2 Exploration des variables",
    "text": "4.2 Exploration des variables\n\nnc_var &lt;- names(nc$var)\n\nnc_charge_var &lt;- function(var) {\n  nc_var &lt;- ncvar_get(nc = nc, varid = var )\n  envir &lt;- globalenv()\n  assign(var, nc_var, envir = envir)\n}\n\nwalk(nc_var, nc_charge_var)\n\nLa variable sst est enregistrée en tant que matrix, array avec les dimensions 1440, 720\nLa valeur enregistrée aux coordonnées [800, 500] vaut sst[800, 500] = 15.3599997\nElle correspond normalement à la température pour la longitude lon[800] = 199.875 et la latitude lat[500] = 34.875\n\nlon_800 &lt;- lon[800]\nlat_500 &lt;- lat[500]\nlonlat &lt;- expand.grid(lon, lat)\ntmp_sst &lt;- as.vector(sst)\ndf_sst &lt;- cbind(lonlat, tmp_sst)\nnames(df_sst) &lt;- c(\"lon\", \"lat\", \"sst\")\nhead(df_sst)\n\n    lon     lat sst\n1 0.125 -89.875  NA\n2 0.375 -89.875  NA\n3 0.625 -89.875  NA\n4 0.875 -89.875  NA\n5 1.125 -89.875  NA\n6 1.375 -89.875  NA\n\ndf_sst |&gt; dplyr::filter(lon == lon_800 & lat == lat_500) -&gt; df_sst_800_500"
  },
  {
    "objectID": "sst_example.html#affichage-de-la-carte-des-données-sst",
    "href": "sst_example.html#affichage-de-la-carte-des-données-sst",
    "title": "\n4  Données SST du 6 janvier 2024\n",
    "section": "\n4.3 Affichage de la carte des données sst",
    "text": "4.3 Affichage de la carte des données sst\nAvec positionnement en rouge du point de test donné en exemple :\n\n#|label: plot_sst\n\ndf_sst |&gt; \n  ggplot(aes(x = lon, y = lat, color = sst)) + \n  geom_point(size = 0.5) +\n  coord_fixed(expand = FALSE) +\n  scale_colour_distiller(palette = \"RdBu\") +\n  geom_point(\n    data = df_sst_800_500, \n    aes(x = lon, y = lat),\n    color = \"red\",\n    size = 2) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Sea Surface Temperature\",\n    subtitle = \"15 janvier 2024\",\n    caption = \"Dataset: NOAA OISST V2.1\",\n    color = \"°C\"\n  )"
  },
  {
    "objectID": "sst_example.html#calcul-de-moyenne-globale",
    "href": "sst_example.html#calcul-de-moyenne-globale",
    "title": "\n4  Données SST du 6 janvier 2024\n",
    "section": "\n4.4 Calcul de moyenne globale",
    "text": "4.4 Calcul de moyenne globale\nIl semble qu’il faille appliquer un poids fonction de \\(\\alpha\\) en radians pour pondérer les mesures de surface en fonction de la latitude considérée.\nPour calculer ces poids j’ai construit tous les polygones “carrés” de 0.25° de côté suivant un même méridien.\nCes polygones ont pour centre les coordonnées (longitude et latitude) de la mesure SST correspondante.\nJ’ai ensuite calculé les aires de ces polygones avec le système de coordonnées de référence EPSG:4326 (WGS84).\nLes poids relatifs à chaque mesure ont été fixés comme étant les ratio des aires obtenues avec celle de la plus grande aire (aire du polygone situé à l’équateur).\nCalcul des poids à affecter aux mesures suivant la latitude associée\n\n# fonction génératrice de \"carré géographique\" de n degrés de côté\n# le point de base (lon, lat) est le point inférieur gauche. \n\npolygone_geo &lt;- function(lon, lat, n) {\n  polygon_list &lt;- list(rbind(\n    c(lon, lat),\n    c(lon + n, lat),\n    c(lon + n, lat + n),\n    c(lon, lat + n),\n    c(lon, lat)\n  ))\n  st_polygon(polygon_list)\n}\n\npolygone_sfc &lt;- seq(-90, 89.75, by = 0.25) |&gt;\n  map(\\(x) polygone_geo(lon = 0, lat = x, n = 0.25)) |&gt; \n  st_sfc(crs = \"EPSG:4326\")\n\narea_weights &lt;- as.numeric(st_area(polygone_sfc) / max(st_area(polygone_sfc)))\nhead(area_weights)\n\n[1] 0.002181655 0.006544922 0.010908066 0.015271001 0.019633646 0.023995917\n\n\n\ndf_area_weights &lt;- expand.grid(lon, area_weights)\nnames(df_area_weights) &lt;- c(\"lon\", \"w\")\nw &lt;- df_area_weights$w\ndf_sst_weights &lt;- cbind(df_sst, w)\ndf_sst_60S_60N &lt;- df_sst_weights |&gt; \n  filter(lat &gt;= -60 & lat &lt;= 60)\nsst_weighted_mean &lt;- df_sst_60S_60N |&gt; \n  summarize(wm_sst = weighted.mean(sst, w, na.rm = TRUE))\nsst_weighted_mean\n\n    wm_sst\n1 21.03032\n\n\nSi nous souhaitons centrer la carte sur le méridien de Greenwich, il est nécessaire de translater les longitudes.\n\n#|label: plot_sst_greenwich\n\ndf_sst |&gt; \n  mutate(lon = if_else(lon &gt; 180, lon - 360, lon)) |&gt; \n  ggplot(aes(x = lon, y = lat, fill = sst)) + \n  geom_raster() +\n  scale_fill_gradient2(\n    low = \"darkblue\",\n    mid = \"white\",\n    high = \"darkred\",\n    midpoint = 15\n  ) +\n  coord_fixed(expand = FALSE) +\n  #scale_colour_distiller(palette = \"RdBu\") +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Sea Surface Temperature\",\n    subtitle = paste0(\n      \"15 janvier 2024 - mean temperature = \",\n      round(sst_weighted_mean, 3),\n      \" °Celsius\"\n    ),\n    caption = \"Dataset: NOAA OISST V2.1\",\n    fill = \"°C\",\n  ) +\n  theme(\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    # panel.background = element_rect(fill = \"black\"),\n    # plot.background = element_rect(fill = \"black\")\n  )\n\n\n\n\n\nlist_raster &lt;- map(nc_var, \\(x) rast(t(get(x))))\n\n\nwalk(list_raster, \\(x) plot(flip(x, direction = \"vertical\")))"
  }
]