---
title: "Données temporelles"
format: html
---

## chargement librairies utiles

```{r}
#| label: load_libraries
#| message: false
#| 
libs <- c(
  "ncdf4",
  "tidyverse",
  "data.table",
  "jsonlite",
  "tictoc",
  "fpp3",
  "stringi"
)
#install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
  install.packages(libs[!installed_libs])
}
#load libraries
invisible(lapply(libs, library, character.only = TRUE))

```

## fonctions de base (peut-être disponibles dans lubridate)

```{r}
#| label: tools
#| 
yyyymm <- function(date) {
  return(gsub("-", "", stri_sub(date, 1, 7)))
}

yyyymmdd <- function(date) { 
  return(gsub("-", "", Sys.Date()))
}

```

## weights to apply to square of 0.25°x0.25° along the latitude

```{r}

area_weights <- fread(
  file = "area_weights.csv",
  dec = ","
) |> pull( w )
# matrix_area_weights <- matrix(rep(area_weights, 1440), nrow = 1440, byrow = TRUE)
# wmean <- weighted.mean(sst, matrix_area_weights, na.rm = TRUE)
# wmean_60_60 <- weighted.mean(sst[,121:600], matrix_area_weights[,121:600], na.rm = TRUE)

```

## fonctions de calcul de moyenne pondérée

Le principe consiste à détecter un fichier de moyenne (fichier RDS) déjà présent ou pas.

Si ce dernier est présent il est lu et complété.

Dans le cas contraire la constition de ce fichier est réalisée à partir de tous les fichiers NetCDF contenus dans le répertoire DATA.

Si le fichier pris en compte est un fichier temporaire (suffixe _preliminary) on attribuera à la donnée un `status_ok` de valeur $FALSE$

Si le fichier pris en compte est un fichier finalisé `status_ok`vaudra $TRUE$

```{r}

# get weighted mean of one variable between lat_min and lat_max
get_var_weighted_mean <- function(file, var, lon_min, lon_max, lat_min, lat_max) {
  # are we consider preliminary file
  status_ok <- if_else(str_detect(file, '_preliminary'), FALSE, TRUE)
  #--- get data from NetCDF file
  nc <- nc_open(file)
  lon <- ncvar_get(nc, varid = "lon")
  lat <- ncvar_get(nc, varid = "lat")
  time <- ncvar_get(nc, varid = "time")
  var <- ncvar_get(nc, varid = var)
  nc_close(nc)
  #--- create the area_weights matrix
  w <- matrix(rep(area_weights, 1440), ncol = 720, byrow = TRUE)
  x_min <- min(which(lon >= lon_min))
  x_max <- max(which(lon <= lon_max))
  y_min <- min(which(lat >= lat_min))
  y_max <- max(which(lat <= lat_max))
  
  #--- calculate weighted mean
  wm_var <- weighted.mean(
    var[x_min:x_max, y_min:y_max], 
    w[x_min:x_max, y_min:y_max], 
    na.rm = TRUE
  )
  #--- 
  c(time, wm_var, status_ok)
}

# get all weighted mean for one variable for all NetCDF files available
get_var_all_weighted_mean <- function(var, geo_data) {
  files <- list.files(path = "DATA", pattern = "*.nc", full.names = TRUE)
  if (length(files) > 0 ) {
    lon_min <- geo_data$bbox["lon_min"]
    lon_max <- geo_data$bbox["lon_max"]
    lat_min <- geo_data$bbox["lat_min"]
    lat_max <- geo_data$bbox["lat_max"]
    #--- RDS file format : wm_<var>_<RDS_name>.RDS
    RDS_file <- paste0('wm_', var, '_', geo_data$RDS_name, '.RDS')
    #message(RDS_file)
    if (file.exists(RDS_file)) {
      #--- return valid files which mean have already been treated
      RDS_data <- readRDS(RDS_file) |> 
        filter(status_ok) # élimination des données temporaires
      saveRDS(RDS_data, RDS_file) 
      valid_files_already_treated <- RDS_data |>
        pull(date) |> 
        yyyymmdd() |> 
        vapply(\(x) paste0('DATA/oisst-avhrr-v02r01.', x, '.nc'), character(1))
      #--- return tempo files which mean have already been treated
      files_to_treat <- files[!(files %in% valid_files_already_treated)]
    } else {
      files_to_treat <- files
    }
    #--- be aware not to consider old tempo files for later version !!!
    origin_date <- ymd("1978-01-01")
    wm_matrix <- matrix(numeric(0), nrow = length(files_to_treat), ncol = 3)
    colnames(wm_matrix) <- c('time', 'wm', 'status_ok')
    for (i in seq_along(files_to_treat)) { 
      result <- get_var_weighted_mean(files_to_treat[i], var, lon_min, lon_max, lat_min, lat_max)
      #message(paste0("file : ", files_to_treat[i]))
      wm_matrix[i, 1] <- result[1] # time in days from origin date
      wm_matrix[i, 2] <- result[2] # weighted mean
      wm_matrix[i, 3] <- result[3] # status
    }
    df_wm_var <- as_tibble(wm_matrix) |>
      set_names('time', paste0('wm_', var), 'status_ok') |> 
      mutate(
        date = lubridate::as_date(time, origin = origin_date),
        status_ok = as.logical(status_ok)
      )
    if (file.exists(RDS_file)) {
      RDS_data <- rbind(RDS_data, df_wm_var)
    } else {
      RDS_data <- df_wm_var
    }
    saveRDS(RDS_data, RDS_file)
    RDS_data
  } else { 
    message("aucun fichier de données à traiter") 
  }
}

```

## calcul des moyennes pondérées pour le monde (60°S-60°N)

Les moyennes pondérées sont calculées consécutivement sur les variables 
`sst`, `anom`, et `ice`.

```{r}

# get weighted mean var with -60 < latitude < 60

geo_world <- list(
  RDS_name = "world", 
  bbox = c(lon_min = 0, lon_max = 360, lat_min = -60, lat_max = 60)
)

df_wm_sst_world <- get_var_all_weighted_mean("sst", geo_world)
# df_wm_anom_world <- get_var_all_weighted_mean("anom", geo_world)
# df_wm_anom_ice <- get_var_all_weighted_mean("ice", geo_world)

```

## calcul des moyennes pondérées pour l'Atlantique Nord (0-60°N, 0-80W)

Les mêmes variables que précédemment sont prises en compte.

```{r}

geo_north_atlantic <- list(
  RDS_name = "north_atlantic",
  bbox = c(lon_min = 280, lon_max = 360, lat_min = 0, lat_max = 60)
)

df_wm_sst_north_atlantic <- get_var_all_weighted_mean("sst", geo_north_atlantic)
# df_wm_anom_north_atlantic <- get_var_all_weighted_mean("anom", geo_north_atlantic)
# df_wm_ice_north_atlantic <- get_var_all_weighted_mean("ice", geo_north_atlantic)

```

## Impression de la série temporelle 

```{r}

df_wm_sst <- readRDS('wm_sst_world.RDS') |> 
  mutate(
    year = year(date),
    yday = yday(date),
    month = month(date)
    ) 

ggplot(data = df_wm_sst,
       aes(x = yday, y = wm_sst, group = year)) +
  geom_line(aes(color = factor(year))) +
  scale_color_grey(start = 0.8, end = 0.2) +
  geom_line(
    data = df_wm_sst |> filter(year == 2023),
    aes(x = yday, y = wm_sst),
    color = "orange",
    linewidth = 1) +
  geom_line(
    data = df_wm_sst |> filter(year == 2024),
    aes(x = yday, y = wm_sst, group = year),
    color = "black", 
    linewidth = 1) +
  labs(
    title = "Daily Sea Surface Temperature, World (60°S-60°N, 0-360°E)",
    subtitle = "Dataset: NOAA OISST V2.1",
    caption = 'caption test',
    color = NULL,
    x = NULL,
    y = NULL
  ) -> p

p + 
  theme_bw() +
  theme(
    legend.position = "bottom",
    plot.caption = element_text(margin = margin(t = 0, unit = 'cm')),
    legend.spacing.x = unit(0.5, 'cm'),
    legend.key = element_blank(),
    legend.text = element_text(colour = 'black'),
  ) +
  guides(
    color = guide_legend(
      ncol = 7, 
      byrow = TRUE, 
      reverse = FALSE,
      label = TRUE,
      #label.hjust = 1,
      #keywidth = unit(0.8, 'cm'),
      label.position = "right",
      x.intersp = 0.2,
      text.width = 0.045
    )
  ) 

```

## impression supplémentaire 1

```{r}

ggplot(data = df_wm_sst,
       aes(x = date, y = wm_sst)) +
  geom_line() +
  geom_smooth(
    method = "lm",
    se = FALSE
  ) + 
  geom_smooth(
    data = df_wm_sst |> 
      filter(year > 2000),
    method = "lm",
    se = FALSE, colour = "#FFA050"
  ) +
  geom_smooth(
    data = df_wm_sst |> 
      filter(year > 2010),
    method = "lm",
    se = FALSE, colour = "#FF0000"
  )

```

## impression supplémentaire 2
  
```{r}

df_wm_sst <- readRDS("wm_sst_world.RDS") |> 
  mutate(year = year(date))
ggplot(data = df_wm_sst) +
  geom_line(aes(x = date, y = wm_sst, group = year, color = year))

```

